#!/bin/bash

# Script to set up Arch Linux ARM on an SD card for Raspberry Pi 5 with Btrfs and Ubuntu-style subvolumes for Timeshift

# Ensure script runs as root
if [[ $EUID -ne 0 ]]; then
   echo "Error: This script must be run as root" >&2
   exit 1
fi

# Set device paths (modify these as needed or pass as arguments)
SDDEV="/dev/nvme0n1"  # Change to your SD card device, e.g., /dev/sdX or /dev/mmcblk0
SDPARTBOOT="/dev/nvme0n1p1"
SDPARTROOT="/dev/nvme0n1p2"
SDMOUNT="/mnt/sd"
DOWNLOADDIR="/tmp/pi_$(date +%s)"  # Unique temp directory
DISTURL="http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-aarch64-latest.tar.gz"
KERNEL_URL="http://mirror.archlinuxarm.org/aarch64/core/linux-rpi-6.12.41-1-aarch64.pkg.tar.xz"

# Step 1: Validate the device
echo "Validating device /dev/nvme0n1..."
if [[ ! -b "/dev/nvme0n1" ]]; then
    echo "Error: Device /dev/nvme0n1 does not exist or is not a block device" >&2
    exit 1
fi

# Warn user about destructive operations
echo "WARNING: This will erase all data on /dev/nvme0n1. Press Enter to continue or Ctrl+C to abort."
read -r

# Step 2: Create the GPT partition table
echo "Creating GPT partition table on /dev/nvme0n1..."
parted -s "/dev/nvme0n1" mklabel gpt || { echo "Error: Failed to create GPT partition table" >&2; exit 1; }

# Step 3: Create the partitions
echo "Creating partitions..."
parted -s "/dev/nvme0n1" mkpart primary fat32 1MiB 1024MiB || { echo "Error: Failed to create boot partition" >&2; exit 1; }
parted -s "/dev/nvme0n1" mkpart primary btrfs 1024MiB 100% || { echo "Error: Failed to create root partition" >&2; exit 1; }
parted -s "/dev/nvme0n1" set 1 boot on || { echo "Error: Failed to set boot flag" >&2; exit 1; }

# Step 4: Format the partitions
echo "Formatting the boot partition as FAT32..."
mkfs.vfat -F 32 /dev/nvme0n1p1 || { echo "Error: Failed to format boot partition" >&2; exit 1; }

echo "Formatting the root partition as Btrfs..."
mkfs.btrfs -s 4096 -f /dev/nvme0n1p2 || { echo "Error: Failed to format root partition as Btrfs" >&2; exit 1; }

# Step 5: Create Ubuntu-style Btrfs subvolumes for Timeshift
echo "Creating Btrfs subvolumes..."
mkdir -p "$SDMOUNT" || { echo "Error: Failed to create mount point $SDMOUNT" >&2; exit 1; }
mount /dev/nvme0n1p2 "$SDMOUNT" || { echo "Error: Failed to mount root partition" >&2; exit 1; }

# Create the subvolumes, specify compression and ensure compatibility with Pi 5
btrfs subvolume create "/mnt/sd/@" || { echo "Error: Failed to create @ subvolume" >&2; umount "$SDMOUNT"; exit 1; }
btrfs subvolume create "/mnt/sd/@home" || { echo "Error: Failed to create @home subvolume" >&2; umount "$SDMOUNT"; exit 1; }
btrfs subvolume create "/mnt/sd/@snapshots" || { echo "Error: Failed to create @snapshots subvolume" >&2; umount "$SDMOUNT"; exit 1; }

# Unmount and remount the @ subvolume as the root
umount "$SDMOUNT" || { echo "Error: Failed to unmount root partition" >&2; exit 1; }
mount -o subvol=@,compress=zstd /dev/nvme0n1p2 "$SDMOUNT" || { echo "Error: Failed to mount @ subvolume" >&2; exit 1; }

# Create and mount the boot directory
mkdir -p "/mnt/sd/boot" || { echo "Error: Failed to create boot directory" >&2; exit 1; }
mount /dev/nvme0n1p1 "/mnt/sd/boot" || { echo "Error: Failed to mount boot partition" >&2; exit 1; }

# Create and mount the home subvolume
mkdir -p "/mnt/sd/home" || { echo "Error: Failed to create home directory" >&2; exit 1; }
mount -o subvol=@home,compress=zstd /dev/nvme0n1p2 "/mnt/sd/home" || { echo "Error: Failed to mount @home subvolume" >&2; exit 1; }

# Create and mount the snapshots subvolume for Timeshift
mkdir -p "/mnt/sd/timeshift" || { echo "Error: Failed to create timeshift directory" >&2; exit 1; }
mount -o subvol=@snapshots,compress=zstd /dev/nvme0n1p2 "/mnt/sd/timeshift" || { echo "Error: Failed to mount @snapshots subvolume" >&2; exit 1; }

# Step 6: Download and extract Arch Linux ARM image
echo "Downloading Arch Linux ARM image..."
mkdir -p "$DOWNLOADDIR" || { echo "Error: Failed to create download directory" >&2; exit 1; }
cd "$DOWNLOADDIR" || { echo "Error: Failed to change to download directory" >&2; exit 1; }
curl -JLO "$DISTURL" || { echo "Error: Failed to download Arch Linux ARM image" >&2; exit 1; }

echo "Extracting Arch Linux ARM image..."
bsdtar -xpf "${DOWNLOADDIR}/ArchLinuxARM-rpi-aarch64-latest.tar.gz" -C "$SDMOUNT" || { echo "Error: Failed to extract image" >&2; exit 1; }

# Step 7: Install the Raspberry Pi kernel
echo "Downloading and installing Raspberry Pi kernel..."
mkdir -p "${DOWNLOADDIR}/linux-rpi" || { echo "Error: Failed to create kernel directory" >&2; exit 1; }
cd "${DOWNLOADDIR}/linux-rpi" || { echo "Error: Failed to change to kernel directory" >&2; exit 1; }
curl -JLO "$KERNEL_URL" || { echo "Error: Failed to download kernel" >&2; exit 1; }
tar -xJf "$(ls *.pkg.tar.xz)" -C "/mnt/sd" || { echo "Error: Failed to extract kernel" >&2; exit 1; }

# Step 8: Configure /etc/fstab for Btrfs subvolumes
echo "Configuring /etc/fstab..."
FSTAB="/mnt/sd/etc/fstab"
PARTUUID=$(lsblk -no PARTUUID /dev/nvme0n1p2)
BOOTUUID=$(lsblk -no PARTUUID /dev/nvme0n1p1)

echo "# /etc/fstab" > "$FSTAB"
echo "PARTUUID=$BOOTUUID  /boot       vfat  defaults  0  2" >> "$FSTAB"
echo "PARTUUID=$PARTUUID  /           btrfs subvol=@,defaults,compress=zstd  0  1" >> "$FSTAB"
echo "PARTUUID=$PARTUUID  /home       btrfs subvol=@home,defaults,compress=zstd  0  2" >> "$FSTAB"
echo "PARTUUID=$PARTUUID  /timeshift  btrfs subvol=@snapshots,defaults,compress=zstd  0  2" >> "$FSTAB"

# Step 9: Sync and unmount the system to make sure all changes are applied
echo "Syncing data and unmounting..."
sync

umount "/mnt/sd/timeshift" || { echo "Error: Failed to unmount timeshift subvolume" >&2; exit 1; }
umount "/mnt/sd/home" || { echo "Error: Failed to unmount home subvolume" >&2; exit 1; }
umount "/mnt/sd/boot" || { echo "Error: Failed to unmount boot partition" >&2; exit 1; }
umount "$SDMOUNT" || { echo "Error: Failed to unmount root subvolume" >&2; exit 1; }

# Step 10: Clean up
echo "Cleaning up..."
rm -rf "$DOWNLOADDIR" || { echo "Error: Failed to clean up download directory" >&2; exit 1; }

# Step 11: Modify cmdline.txt for Btrfs and Subvolume mounting
echo "Modifying cmdline.txt for Btrfs subvolume..."

# Get the PARTUUID for the root partition
ROOT_PARTUUID=$(lsblk -no PARTUUID /dev/nvme0n1p2)

# Create temporary mount point and mount boot partition
TEMP_BOOT="/tmp/boot_mount"
mkdir -p "$TEMP_BOOT" || { echo "Error: Failed to create temporary boot mount point" >&2; exit 1; }
mount /dev/nvme0n1p1 "$TEMP_BOOT" || { echo "Error: Failed to mount boot partition" >&2; exit 1; }

echo "Clearing out cmdline.txt..."
truncate -s 0 "$TEMP_BOOT/cmdline.txt" || { echo "Error: Failed to clear cmdline.txt" >&2; exit 1; }

# Append the root and subvolume settings
echo "Appending root settings to cmdline.txt..."
echo "root=PARTUUID=$ROOT_PARTUUID rootflags=subvol=@ rw rootwait console=serial0,115200 console=tty1 fsck.repair=yes" > "$TEMP_BOOT/cmdline.txt" || { echo "Error: Failed to write to cmdline.txt" >&2; exit 1; }

# Sync and unmount boot partition
sync
umount "$TEMP_BOOT" || { echo "Error: Failed to unmount boot partition" >&2; exit 1; }
rmdir "$TEMP_BOOT" || { echo "Error: Failed to remove temporary mount point" >&2; exit 1; }

echo "Setup complete! The SD card is ready for Raspberry Pi 5 with Arch Linux ARM and Btrfs subvolumes."



